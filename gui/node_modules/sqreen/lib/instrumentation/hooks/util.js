/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const CLS = require('continuation-local-storage');
const Shimmer = require('shimmer');
const Fs = require('fs');
const Path = require('path');

const FunctionPatcher = require('../functionPatcher');

const config = {
    reveal: typeof process.env.REVEAL_OUTPUT === 'string'
};

const stringStore = new WeakMap();

const holder = {
    inspectOutput: function (req, res,output) {},
    sqreenMiddleWare: function (req, res, next) {

        if (config.reveal && typeof res === 'object') {
            const write = res.write;
            const end = res.end;

            stringStore.set(res, '');
            res.write = function (chunk) {

                let str = stringStore.get(res);
                str += (chunk || '').toString('utf8'); // this might get pretty long: TODO check on chunks ?
                stringStore.set(res, str);
                write.apply(res, arguments);
            };

            res.end = function (chunk) {

                let str = stringStore.get(res);
                if (chunk) {
                    str += chunk.toString('utf8');
                }
                holder.inspectOutput(req, res, str);
                end.apply(res, arguments);
            };
        }

        return next();
    }
};
FunctionPatcher.patchFunction(holder, 'sqreenMiddleWare', { name: 'sqreen' }, 'express');
FunctionPatcher.patchFunction(holder, 'inspectOutput', { name: 'sqreen' }, 'express');
module.exports.sqreenMiddleWare = holder.sqreenMiddleWare;

module.exports.hasCookieParser = function () {

    try {
        const res = JSON.parse(Fs.readFileSync(Path.join(process.cwd(), 'package.json')).toString());
        return !!(res.dependencies && res.dependencies['cookie-parser']);
    }
    catch (_) {
        return false;
    }
};


const shimBind = function (bind) {

    return function () {

        const fn = bind.apply(this, arguments);

        return function () {

            try {
                return fn.apply(this, arguments);
            }
            catch (err) {
                if (err && typeof err === 'object') {
                    err['error@context'] = undefined;
                }
                throw err;
            }
        };
    };
};

const shimRun = function (run) {

    return function () {

        try {
            return run.apply(this, arguments);
        }
        catch (err) {
            if (err && typeof err === 'object') {
                err['error@context'] = undefined;
            }
            throw err;
        }
    };
};

module.exports.getNS = function () {

    if (CLS.getNamespace('sqreen_session')) {
        return CLS.getNamespace('sqreen_session');
    }
    const NS = CLS.createNamespace('sqreen_session');

    // this will override the methods for all instances of NameSpace...
    const prototype = Object.getPrototypeOf(NS);
    Shimmer.wrap(prototype, 'bind', shimBind);
    Shimmer.wrap(prototype, 'run', shimRun);

    return NS;
};

module.exports._shimBind = shimBind;
module.exports._shimRun = shimRun;
module.exports._config = config;
module.exports._holder = holder;
